<%=
config = {
  "id" => p("pcap-api.id"),
  "log_level" => p("pcap-api.log_level"),
  "buffer" => {
    "size" => p("pcap-api.buffer.size"),
    "upper_limit" => p("pcap-api.buffer.upper_limit"),
    "lower_limit" => p("pcap-api.buffer.lower_limit"),
  },
  "concurrent_captures" => p("pcap-api.concurrent_captures"),
  "listen" => {
    "port" => p("pcap-api.listen.port"),
    "tls" => {
      "certificate"=> "/var/vcap/jobs/pcap-api/config/pcap-api.crt",
      "key" => "/var/vcap/jobs/pcap-api/config/pcap-api.key",
    },
  },
  "cli_download_root" => p("pcap-api.cli_download_root")
}

if_p("pcap-api.bosh.director_url", "pcap-api.bosh.token_scope") do
  bosh_mtls = nil
  if_p("pcap-api.bosh.mtls.common_name", "pcap-api.bosh.mtls.skip_verify") do
    bosh_mtls = {
      "common_name" => p("pcap-api.bosh.mtls.common_name"),
      "skip_verify" => p("pcap-api.bosh.mtls.skip_verify"),
      "tls" => {
        "certificate" => '/var/vcap/jobs/pcap-api/config/certs/bosh/pcap-api-bosh.crt',
        "private_key" => '/var/vcap/jobs/pcap-api/config/certs/bosh/pcap-api-bosh.key',
        "ca" => '/var/vcap/jobs/pcap-api/config/certs/bosh/pcap-api-bosh.ca'
        }
    }
  end
  config['bosh'] = {
      "agent_port" => p("pcap-api.bosh.agent_port"),
      "director_url" => p("pcap-api.bosh.director_url"),
      "token_scope" => p("pcap-api.bosh.token_scope"),
      "mtls" => bosh_mtls
  }

  puts config
end

YAML.dump(config)
%>
